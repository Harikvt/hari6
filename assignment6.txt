
1. List of all the packages in NPM:

NPM: Node Package Manager
A package in node.js contains all the files you need for a module.

Packages in NPM are:
Request, Lodash, Async, chalk, Commander, Debug, 
react-dom, tslib, axios, fs-extra, vue,bluebird, uuid, 
classnames, core-js, jquery,minimist, @types/node, 
@babel/runtime,aws-sdk,babel-runtime,semver,
css-loader,rimraf,babel-core,yeoman-generator,js-yaml,
ora,@angular/corestyled-components.

2. converting buffer to json

var buf = new Buffer("abcd");
console.log(buf.toJSON());

output:{type:'Buffer',data:[97,98,99,100]}


//synchronous and asynchronous file methods in nodejs
//FS = file system in node js
// read, write and delete the file
var fs = require('fs')

fs.readFile('calsi.js','utf8',function(err,data){
    console.log(data);
})
fs.readFile('app.js','utf8',function(err,data){
    console.log(data);
});
fs.writeFile('calsi.js','console.log("hii kvt")',function(err){
    console.log("file created");
})


//append file
fs.appendFile('calsi.js', 'Hello world', function (err) {
  if (err) throw err;
  console.log('terminated');
});


//delete
fs.unlink('calx.js',function(err){
    console.log("file deleted");
})
var fs = require('fs');

//mathematical operations on file system
var addition=require('./calsi.js')
var subtraction=require('./calsi.js')
var  multiplication=require('./calsi.js')
var division=require('./calsi.js')

result = addition.add(4,5);
result1 = subtraction.sub(4,5);
result2= multiplication.mul(4,5);
result3 = division.div(4,5);

console.log("the output is" + result)
console.log("the output is" + result1)
console.log("the output is" + result2)
console.log("the output is" + result3)


function add(a,b){
    return a+b;
}
function sub(c,d){
    return c-d;
}
function mul(e,f){
    return e*f;
}
function div(g,h){
    return g/h;
}


module.exports.add = add
module.exports.sub= sub
module.exports.mul=mul
module.exports.div = div


//eventloops
var events =require('events');

var eventEmmitter = new events.EventEmitter();

var connectHandler = function connected(){
    console.log("connection is established is not")
    eventEmmitter.emit('data received')
}

eventEmmitter.on('connection',connectHandler);

eventEmmitter.on('data received', function(){
      console.log("data received successfully")
});

eventEmmitter.emit('connectionestablished');
console.log("programme terminated");

//synchronous methods of file system in nodejs
 var fs=require('fs');
let data="Today is very hot";
let sai="hari is a good learner"+"he is very fast in work";

fs.writeFileSync("hari.txt",data)
fs.writeFileSync("hari1.js",sai)
console.log("File has been created sucessfully");
console.log(fs.readFileSync('hari.txt','utf8'));
console.log(fs.readFileSync('hari1.js','utf8')); 

const fs = require('fs');
fs.readFile('hari.txt', (err, data) => {
  if (err) throw err;
  console.log(data);
});
fs.unlinkSync('hari.txt');


//nodejs buffers
var buf = new Buffer("java script is easy","utf-8");
buf=new Buffer(256);
len=buf.write("java script is very hard");
console.log("buffer unicode return as"+" "+buf );
console.log("buffer unicode are"+len);
buf=new Buffer(26);
for(var i=0;i<26;i++){
    buf[i]=i+65
}
console.log(buf.toString('ascii'))
console.log(buf.toString('ascii',0,5))
console.log(buf.toString('utf8',0,6))
console.log(buf.toString(undefined,0,10))
//concate two buffers
var buffer1 = new Buffer('hari kvt');
var buffer2 = new Buffer('is a nice boy');
var buffer3 = Buffer.concat([buffer1,buffer2]);
console.log("buffer3 content: " + buffer3.toString());

//compare buffers
var buf1 = new Buffer('hari');
var buf2 = new Buffer('kvt');
var result = buf1.compare(buf2);

if(result < 0) {
   console.log(buf1 +" comes before " + buf2);
} else if(result === 0) {
   console.log(buf1 +" is same as " + buf2);
} else {
   console.log(buf1 +" comes after " + buf2);
}

//copy a buffer
var buf2 = new Buffer(3);
buf1.copy(buf2);
console.log("buf2 content: " + buf2.toString());

var buffer = new Buffer('harikvt');
//length of the buffer
console.log("buffer length: " + buffer.length);


